{"version":3,"sources":["components/SearchCityForm/styles.module.scss","store/types.js","store/weather/reducer.js","store/dailyForecast/reducer.js","store/rootReducer.js","store/weather/actions.js","store/configureStore.js","store/dailyForecast/actions.js","components/ WeatherCard/WeatherCard.tsx","components/Loading.js","components/withFetch.js","components/SearchCityForm/SearchCityForm.tsx","pages/WeatherPage.tsx","containers/WeatherContainer.js","pages/DailyForecastPage.tsx","containers/DailyForecastContainer.tsx","components/App.tsx","serviceWorker.js","index.js"],"names":["module","exports","APPID","initialState","isFetching","error","cities","citiesSearchMatch","dailyForecast","cityName","rootReducer","combineReducers","weather","state","action","type","filter","city","id","payload","getWeather","url","dispatch","fetch","then","response","json","console","log","list","store","createStore","compose","applyMiddleware","thunk","logger","window","__REDUX_DEVTOOLS_EXTENSION__","citiesFromLocalStorage","JSON","parse","localStorage","getItem","initialCities","length","join","subscribe","selectedCitiesId","getState","map","setItem","stringify","getDailyForecast","cityID","name","Row","styled","div","Temp","Detail","ul","WeatherCard","props","idList","deleteList","Card","style","background","margin","maxWidth","width","CardContent","to","onClick","Typography","variant","component","dt_txt","slice","IconButton","aria-label","Math","round","main","temp","src","icon","alt","className","feels_like","wind","speed","humidity","pressure","Container","Loading","CircularProgress","withFetch","Cmp","results","data","ok","Error","statusText","this","setState","fetchData","React","Component","FormWrap","SearchCityForm","cityInput","searchCity","e","preventDefault","cytiesList","wordToMatch","regex","RegExp","place","match","findMatches","current","value","replace","index","searchCitiesMatch","displayMatches","selectCity","addList","createRef","bind","Form","onSubmit","FormGroup","controlId","InputGroup","RootRef","rootRef","FormControl","placeholder","autoComplete","Append","Button","color","styles","suggestions","key","dangerouslySetInnerHTML","__html","Title","h1","WeatherPage","createList","textAlign","marginTop","connect","newList","newCityId","newCitiesId","concat","citiesList","DailyForecastPage","Wrapper","section","App","WeatherContainer","path","exact","children","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0f802ca4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"suggestions\":\"styles_suggestions__3O27_\"};","// LocalStorage\nexport const STORAGE_KEY = 'WEATHER'\nexport const APPID = '3897463698fab29cbf0f47eca9ac50d5'\n// List\nexport const CREATE_LIST = 'LIST/CREATE_LIST'\nexport const DELETE_LIST = 'LIST/DELETE_LIST'\n//Weather\nexport const GET_WEATHER_REQUEST = 'WEATHER/GET_WEATHER_REQUEST'\nexport const GET_WEATHER_SUCCESS = 'WEATHER/GET_WEATHER_SUCCESS'\nexport const GET_WEATHER_FAILURE = 'WEATHER/GET_WEATHER_FAILURE'\nexport const MATCH_CITIES = 'WEATHER/MATCH_CITIES'\nexport const GET_DAILY_FORECAST_REQUEST = 'WEATHER/GET_DAILY_FORECAST_REQUEST'\nexport const GET_DAILY_FORECAST_SUCCESS = 'WEATHER/GET_DAILY_FORECAST_SUCCESS'\nexport const GET_DAILY_FORECAST_FAILURE = 'WEATHER/GET_DAILY_FORECAST_FAILURE'","import { DELETE_LIST, GET_WEATHER_REQUEST, GET_WEATHER_SUCCESS, GET_WEATHER_FAILURE, MATCH_CITIES } from '../types.js'\n\nconst initialState = {\n    isFetching: false,\n    error: '',\n    cities: [],\n    citiesSearchMatch: []\n}\n\nexport const weatherReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case DELETE_LIST:\n            return {\n                ...state,\n                cities: state.cities.filter(city => city.id !== action.payload)\n            }\n        case GET_WEATHER_REQUEST:\n            return { ...state, isFetching: true }\n        case GET_WEATHER_SUCCESS:\n            return { ...state, isFetching: false, cities: action.payload.cities }\n        case GET_WEATHER_FAILURE:\n            return { ...state, isFetching: false, error: action.payload }\n        case MATCH_CITIES:\n            return { ...state, citiesSearchMatch: action.payload }\n        default: return state\n    }\n}","import { GET_DAILY_FORECAST_REQUEST, GET_DAILY_FORECAST_SUCCESS, GET_DAILY_FORECAST_FAILURE } from '../types.js'\n\nconst initialState = {\n    isFetching: false,\n    error: '',\n    dailyForecast: [],\n    cityName: ''\n}\n\nexport const dailyForecastReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_DAILY_FORECAST_REQUEST:\n            return { ...state, isFetching: true }\n        case GET_DAILY_FORECAST_SUCCESS:\n            return { ...state, isFetching: false, dailyForecast: action.payload.dailyForecast, cityName: action.payload.cityName}\n        case GET_DAILY_FORECAST_FAILURE:\n            return { ...state, isFetching: false, error: action.payload }\n        default: return state\n    }\n}","import { combineReducers } from 'redux'\nimport { weatherReducer as weather } from './weather/reducer'\nimport { dailyForecastReducer as dailyForecast } from './dailyForecast/reducer'\n\nexport const rootReducer = combineReducers({\n    weather, dailyForecast\n})","import { APPID, STORAGE_KEY, DELETE_LIST, GET_WEATHER_REQUEST, GET_WEATHER_SUCCESS, GET_WEATHER_FAILURE, MATCH_CITIES} from '../types.js'\n// List \nexport const createList = (newCityId) => {\n    const citiesFromLocalStorage = JSON.parse((localStorage.getItem(STORAGE_KEY)))\n    const newCitiesId = citiesFromLocalStorage.concat(newCityId)\n    const url = `https://api.openweathermap.org/data/2.5/group?id=${newCitiesId.join()}&units=metric&appid=${APPID}`\n    return dispatch => {\n        dispatch(getWeather(url))\n    }\n}\n\nexport const deleteList = (id) => {\n    return {\n        type: DELETE_LIST,\n        payload: id\n    }\n}\n\nexport const searchCitiesMatch = (cytiesList) => {\n    return {\n        type: MATCH_CITIES,\n        payload: cytiesList\n    }\n}\n\nexport const getWeather = (url) => {\n    return dispatch => {\n        dispatch({\n            type: GET_WEATHER_REQUEST\n        })\n        try {\n            fetch(url)\n                .then(response => response.json())\n                .then(json => {\n                    console.log(url)\n                    dispatch({\n                        type: GET_WEATHER_SUCCESS,\n                        payload: {\n                            cities: json.list\n                        }\n                    })\n                })\n                // .catch(error =>\n                //     dispatch({\n                //         type: GET_WEATHER_FAILURE,\n                //         payload: error\n                //     })\n                // )\n        }\n        catch (error) {\n            dispatch({\n                type: GET_WEATHER_FAILURE,\n                payload: error\n            })\n        }\n    }\n}\n\n","import { compose, createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport logger from 'redux-logger'\nimport { rootReducer } from './rootReducer'\nimport { STORAGE_KEY } from './types'\nimport { APPID } from './types'\nimport { getWeather } from './weather/actions'\n\nexport const store = createStore(rootReducer,\n    compose(applyMiddleware(thunk, logger), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n)\n\nconst citiesFromLocalStorage = JSON.parse((localStorage.getItem(STORAGE_KEY)))\nconst initialCities = citiesFromLocalStorage && citiesFromLocalStorage.length !== 0 ? citiesFromLocalStorage : [524901, 703448, 2643743]\nconst url = `https://api.openweathermap.org/data/2.5/group?id=${initialCities.join()}&units=metric&appid=${APPID}`\nstore.dispatch(getWeather(url))\n\n/* Save to LocalStorage */\nstore.subscribe(() => {\n    const selectedCitiesId = store.getState().weather.cities.map(city => city.id)\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedCitiesId))\n})","import { APPID, GET_DAILY_FORECAST_REQUEST, GET_DAILY_FORECAST_SUCCESS, GET_DAILY_FORECAST_FAILURE } from '../types.js'\n\nexport const getDailyForecast = (cityID) => {\n    const url = `//api.openweathermap.org/data/2.5/forecast?id=${cityID}&appid=${APPID}`\n    console.log(url)\n    return dispatch => {\n        dispatch({\n            type: GET_DAILY_FORECAST_REQUEST\n        })\n        try {\n            fetch(url)\n                .then(response => response.json())\n                .then(json => {\n                    dispatch({\n                        type: GET_DAILY_FORECAST_SUCCESS,\n                        payload: {\n                            dailyForecast: json.list,\n                            cityName: json.city.name\n                        }\n                    })\n                })\n            // .catch(error =>\n            //     dispatch({\n            //         type: GET_WEATHER_FAILURE,\n            //         payload: error\n            //     })\n            // )\n        }\n        catch (error) {\n            dispatch({\n                type: GET_DAILY_FORECAST_FAILURE,\n                payload: error\n            })\n        }\n    }\n}\n\n","import React, { FC } from \"react\";\nimport styled from 'styled-components'\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton'\nimport { Link } from 'react-router-dom'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\ntype CardListProps = {\n  weather: any\n  idList?: string | number | any\n  deleteList?: (idList: number | string) => void\n  getDailyForecast?: (cityId: number | string) => void\n}\nconst Row = styled.div`\n  display:flex;\n  flex-direction:row;\n  justify-content: space-between;\n  align-items: center;\n    img {\n        width: 30%;\n    }\n    a {\n      color:#000;\n    }\n`;\nconst Temp = styled.div`\n font-size:3rem;\n font-weight:bold;\n`;\n\nconst Detail = styled.ul`\n list-style:none;\n padding-left:0;\n  li {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n      span {\n        font-size:.8rem;\n        }\n }\n`;\n\nconst WeatherCard: FC<CardListProps> = (props) => {\n  const { weather, idList, deleteList, getDailyForecast } = props\n  return (\n    <Card style={{ background: 'rgba(255, 255, 255, .7)', margin: '35px 40px', maxWidth: '320px', width: '320px' }}>\n      <CardContent>\n        <Row>\n          {weather.name &&\n            <Link to={`/weather-app/${weather.id}`} onClick={() => getDailyForecast && getDailyForecast(weather.id)}>\n              <Typography variant=\"h6\" component=\"h2\"> {weather.name}</Typography>\n            </Link>\n          }\n          {weather.dt_txt &&\n              <Typography variant=\"h6\" component=\"h2\">  {weather.dt_txt.slice(0, -3)}</Typography>\n          }\n          {deleteList &&\n            <IconButton aria-label=\"delete\" onClick={() => deleteList && deleteList(idList)}>\n              <CloseIcon />\n            </IconButton>\n          }\n        </Row>\n        <Row>\n          {/* If Kelvin when x-273.15 */}\n          <Temp>\n            {Math.round(weather.main.temp < 200 ? weather.main.temp : weather.main.temp - 273.15)}°C\n          </Temp>\n          <img src={`//openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/${weather.weather[0].icon}.png`} alt=\"weather\" />\n        </Row>\n        <div className=\"details\">\n          <hr />\n          <h6>Details</h6>\n          <Detail>\n            <li>\n              <span>Feels like:</span>\n              {weather.main.feels_like}°C\n            </li>\n            <li>\n              <span>Wind:</span>\n              {weather.wind.speed}m/s\n            </li>\n            <li>\n              <span>Humidity:</span>\n              {weather.main.humidity}%\n            </li>\n            <li>\n              <span>Pressure:</span>\n              {weather.main.pressure}hPa\n            </li>\n          </Detail>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default WeatherCard;","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    width:100%;\n    height:50vh;\n`;\nexport const Loading = () => {\n    return (\n        <Container>\n            <CircularProgress />\n        </Container>\n    )\n}","import React from \"react\";\n// HOC\nconst withFetch = props => {\n    return (Cmp) => class WithFetch extends React.Component {\n        constructor() {\n            super();\n            this.state = {\n                results: []\n            };\n        }\n        async fetchData() {\n            try {\n                const data = await fetch(props.url)\n                if (!data.ok) {\n                    throw Error(data.statusText)\n                }\n                const json = await data.json()\n                if (json) {\n                    this.setState({\n                        results: json\n                    });\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        }\n        async componentDidMount() {\n            this.fetchData();\n        }\n        render() {\n            const { results } = this.state;\n            return (\n                <Cmp results={results} {...this.props} />\n            )\n        }\n    }\n}\n\nexport default withFetch;","import React, { Component } from \"react\"\nimport RootRef from '@material-ui/core/RootRef'\nimport Form from 'react-bootstrap/Form'\nimport FormGroup from 'react-bootstrap/FormGroup'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from '@material-ui/core/Button'\nimport withFetch from '../withFetch'\nimport styles from './styles.module.scss'\nimport styled from 'styled-components'\nimport { IStateSearch, IPropsSearch } from '../../interfaces';\n\nconst FormWrap = styled.div`\n  width:320px;\n  margin: 0 auto;\n  position:relative;\n    input {\n        background: rgba(255, 255, 255, 0.7);\n        border: none;\n    }\n`;\n\nclass SearchCityForm extends Component<IPropsSearch, IStateSearch> {\n    private cityInput: React.RefObject<HTMLInputElement>\n    constructor(props: IPropsSearch) {\n        super(props);\n        this.cityInput = React.createRef()\n        this.searchCity = this.searchCity.bind(this)\n        this.selectCity = this.selectCity.bind(this)\n    }\n\n    searchCity = (e) => {\n        e.preventDefault()\n        const findMatches = (wordToMatch, cities) => {\n            const regex = new RegExp(wordToMatch, 'gi')\n            return cities.filter(place => {\n                return place.name.match(regex)\n            })\n        }\n\n        const displayMatches = () => {\n            const matchArray = findMatches(this.cityInput.current!.value, this.props.results)\n            const cytiesList = matchArray.map(city => {\n                const regex = new RegExp(this.cityInput.current!.value, 'gi');\n                const cityName = city.name.replace(regex, `<span className=\"hl2\">${this.cityInput.current!.value}</span>`);\n                return { name: cityName, index: city.id }\n            })\n            this.props.searchCitiesMatch(cytiesList)\n        }\n        displayMatches()\n    }\n    selectCity = (index) => {\n        this.props.addList(index)\n        this.cityInput.current!.value = \"\";\n        this.props.searchCitiesMatch([])\n    }\n\n    render() {\n        const { citiesSearchMatch } = this.props\n        return (\n            <FormWrap>\n                <Form onSubmit={(e: any): void => this.searchCity(e)}>\n                    <FormGroup controlId=\"formAddItem\">\n                        <InputGroup className=\"mb-3\" >\n                            <>\n                                <RootRef rootRef={this.cityInput}>\n                                    <FormControl\n                                        placeholder=\"London\"\n                                        autoComplete=\"off\"\n                                    // onChange={(e: any): void => this.searchCity(e)}\n                                    />\n                                </RootRef>\n                                <InputGroup.Append>\n                                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                                        Search\n                            </Button>\n                                </InputGroup.Append>\n                            </>\n                        </InputGroup>\n                    </FormGroup>\n                    <div className={styles.suggestions}>\n                        {citiesSearchMatch.length > 0 &&\n                            <ul>\n                                {citiesSearchMatch.map(city => {\n                                    return (\n                                        <li key={city.index} onClick={(): void => this.selectCity(city.index)}>\n                                            <span className=\"city_name\" dangerouslySetInnerHTML={{ __html: `${city.name}` }} />\n                                        </li>\n                                    )\n                                })\n                                }\n                            </ul>\n                        }\n                    </div>\n                </Form>\n            </FormWrap>\n        )\n    }\n}\n\nconst url = \"/weather-app/json/city.list.min.json\"\nexport default withFetch({ url: url })(SearchCityForm)","import React, { FC } from 'react';\nimport WeatherCard from '../components/ WeatherCard/WeatherCard';\nimport styled from 'styled-components'\nimport { Loading } from 'components/Loading';\nimport SearchCityForm from '../components/SearchCityForm/SearchCityForm';\n\nconst Title = styled.h1`\n  color:#000000;\n  text-align:center;\n  width:100%;\n  font-size:2rem;\n  padding-top: 20px;\n`;\n\nconst WeatherPage: FC<any> = (props) => {\n    const { weather, isFetching, error, citiesSearchMatch, createList, deleteList, searchCitiesMatch, getDailyForecast } = props\n    return (\n        <>\n            <Title>weather</Title>\n            <div style={{ width: '100%', textAlign: 'center', marginTop: '20px' }}>\n                <SearchCityForm addList={createList} citiesSearchMatch={citiesSearchMatch} searchCitiesMatch={searchCitiesMatch} />\n            </div>\n            {(isFetching || error) &&\n                isFetching ? <Loading /> : <div>{error}</div>\n            }\n            {(!isFetching && !error) &&\n                (weather.length === 0) &&\n                <p className=\"center\">While there is no cities</p>\n            }\n            {(!isFetching && !error) &&\n                (weather.length !== 0) &&\n                weather.map(list => {\n                    return (\n                            <WeatherCard idList={list.id}\n                                weather={list}\n                                deleteList={deleteList}\n                                getDailyForecast={getDailyForecast} />\n                    )\n                })\n            }\n        </>\n    )\n}\n\nexport default WeatherPage;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { createList, deleteList, searchCitiesMatch } from '../store/weather/actions'\nimport { getDailyForecast } from '../store/dailyForecast/actions'\nimport WeatherPage from '../pages/WeatherPage.tsx'\n\nconst WeatherContainer = (props) => {\n    const { weather, isFetching, error, citiesSearchMatch, searchCitiesMatch, createList, deleteList, getDailyForecast } = props\n    return (\n        <WeatherPage\n            createList={createList}\n            deleteList={deleteList}\n            searchCitiesMatch={searchCitiesMatch}\n            citiesSearchMatch={citiesSearchMatch}\n            getDailyForecast={getDailyForecast}\n            weather={weather}\n            isFetching={isFetching}\n            error={error}\n        />\n    )\n}\n\nconst mapStateToProps = (store) => {\n    return {\n        weather: store.weather.cities,\n        isFetching: store.weather.isFetching,\n        error: store.weather.error,\n        citiesSearchMatch:store.weather.citiesSearchMatch\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createList: (newList) => dispatch(createList(newList)),\n        deleteList: (idList) => dispatch(deleteList(idList)),\n        searchCitiesMatch: (citiesList) => dispatch(searchCitiesMatch(citiesList)),\n        getDailyForecast: (cityID) => dispatch(getDailyForecast(cityID))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherContainer)","import React, { FC } from 'react'\nimport WeatherCard from '../components/ WeatherCard/WeatherCard'\nimport styled from 'styled-components'\nimport { Loading } from 'components/Loading'\n\nconst Title = styled.h1`\n  color:#000000;\n  text-align:center;\n  width:100%; \n  font-size:2rem;\n  padding-top: 20px;\n`;\n\nconst DailyForecastPage: FC<any> = (props) => {\n    const { cityName, dailyForecast, isFetching, error } = props\n    return (\n        <>\n            <Title>Daily Forecast for 5 days in {cityName}</Title>\n            {(isFetching || error) &&\n                isFetching ? <Loading /> : <div>{error}</div>\n            }\n            {(!isFetching && !error) &&\n                (dailyForecast.length === 0) &&\n                <p className=\"center\">While there is no cities</p>\n            }\n            {(!isFetching && !error) &&\n                (dailyForecast.length !== 0) &&\n                dailyForecast.map(list => {\n                    return (\n                        <WeatherCard idList={list.id}\n                            weather={list}\n                        />\n                    )\n                })\n            }\n        </>\n    )\n}\n\nexport default DailyForecastPage","import React from 'react';\nimport { connect } from 'react-redux'\nimport { getDailyForecast } from '../store/dailyForecast/actions'\nimport DailyForecastPage from '../pages/DailyForecastPage'\n\nconst DailyForecastContainer = (props) => {\n    const { getDailyForecast, cityName, dailyForecast, isFetching, error } = props\n    return (\n        <DailyForecastPage\n            getDailyForecast={getDailyForecast}\n            cityName={cityName}\n            dailyForecast={dailyForecast}\n            isFetching={isFetching}\n            error={error}\n        />\n    )\n}\n\nconst mapStateToProps = (store) => {\n    return {\n        cityName: store.dailyForecast.cityName,\n        dailyForecast: store.dailyForecast.dailyForecast,\n        isFetching: store.dailyForecast.isFetching,\n        error: store.dailyForecast.error\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getDailyForecast: (cityID) => dispatch(getDailyForecast(cityID))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DailyForecastContainer)","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport styled from 'styled-components'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport WeatherContainer from '../containers/WeatherContainer';\nimport DailyForecastContainer from '../containers/DailyForecastContainer';\n\nconst Wrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  flex-wrap:wrap;\n`;\n\nexport const App = () => {\n  return (\n    <>\n      <BrowserRouter>\n        <Wrapper>\n          <Switch>\n            <Route component={WeatherContainer} path='/weather-app/' exact />\n            <Route children={<DailyForecastContainer />} path='/weather-app/:id' />\n          </Switch>\n        </Wrapper>\n      </BrowserRouter>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { store } from './store/configureStore'\nimport { App } from './components/App'\nimport './assets/index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}